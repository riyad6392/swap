<?php

namespace App\Http\Requests\Product;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Support\Facades\Auth;

class UpdateProductRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'name' => 'required',
            'description' => 'required',
            'category_id' => 'required|exists:categories,id',
            'product_images' => 'required|array',
            'deleted_image_ids' => 'sometimes|array',
        ];
    }
    public function failedValidation(Validator $validator)
    {
        throw new HttpResponseException(response()->json([
            'success'   => false,
            'message'   => 'Validation errors',
            'errors'      => $validator->errors()
        ], 422));
//        parent::failedValidation($validator); // TODO: Change the autogenerated stub
    }
    public function messages(): array
    {
        return [
            'name.required' => 'Product name is required',
            'description.required' => 'Product description is required',
            'price.required' => 'Product price is required',
            'price.numeric' => 'Product price must be a number',
            'category_id.required' => 'Category is required',
            'category_id.exists' => 'Category does not exist',
            'user_id.required' => 'User is required',
            'user_id.exists' => 'User does not exist',
            'user_id.integer' => 'User must be an integer',
            'images.required' => 'Product image is required',
            'images.array' => 'Product image must be an array'
        ];
    }
    public function all($keys = null)
    {
        $data = parent::all($keys);
        $data['user_id'] = Auth::id() ?? 1;

        return $data;
    }
}
